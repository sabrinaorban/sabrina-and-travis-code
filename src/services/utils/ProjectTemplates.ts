
import { ensureFolderExists } from './FolderOperations';

// Create a test Next.js project
export const createNextJsProject = async (fileSystem: any): Promise<boolean> => {
  if (!fileSystem) {
    console.error('[ProjectTemplates] File system not available');
    return false;
  }
  
  try {
    console.log('[ProjectTemplates] Creating Next.js project structure');
    
    // Create main project folder
    await ensureFolderExists(fileSystem, '/nextjs-app');
    
    // Create basic structure folders
    await ensureFolderExists(fileSystem, '/nextjs-app/pages');
    await ensureFolderExists(fileSystem, '/nextjs-app/public');
    await ensureFolderExists(fileSystem, '/nextjs-app/styles');
    await ensureFolderExists(fileSystem, '/nextjs-app/components');
    await ensureFolderExists(fileSystem, '/nextjs-app/lib');
    
    // Create package.json
    const packageJson = `{
  "name": "nextjs-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "^12.0.0",
    "react": "^17.0.2",
    "react-dom": "^17.0.2"
  }
}`;
    
    await fileSystem.createFile('/nextjs-app', 'package.json', packageJson);
    
    // Create next.config.js
    const nextConfig = `/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
}

module.exports = nextConfig`;
    
    await fileSystem.createFile('/nextjs-app', 'next.config.js', nextConfig);
    
    // Create index.js in pages folder
    const indexJs = `import Head from 'next/head';
import styles from '../styles/Home.module.css';

export default function Home() {
  return (
    <div className={styles.container}>
      <Head>
        <title>Next.js App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <p className={styles.description}>
          Get started by editing{' '}
          <code className={styles.code}>pages/index.js</code>
        </p>

        <div className={styles.grid}>
          <a href="https://nextjs.org/docs" className={styles.card}>
            <h2>Documentation &rarr;</h2>
            <p>Find in-depth information about Next.js features and API.</p>
          </a>

          <a href="https://nextjs.org/learn" className={styles.card}>
            <h2>Learn &rarr;</h2>
            <p>Learn about Next.js in an interactive course with quizzes!</p>
          </a>
        </div>
      </main>
    </div>
  );
}`;
    
    await fileSystem.createFile('/nextjs-app/pages', 'index.js', indexJs);
    
    // Create _app.js in pages folder
    const appJs = `import '../styles/globals.css'

function MyApp({ Component, pageProps }) {
  return <Component {...pageProps} />
}

export default MyApp`;
    
    await fileSystem.createFile('/nextjs-app/pages', '_app.js', appJs);
    
    // Create global CSS file
    const globalCss = `html,
body {
  padding: 0;
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
}

a {
  color: inherit;
  text-decoration: none;
}

* {
  box-sizing: border-box;
}`;
    
    await fileSystem.createFile('/nextjs-app/styles', 'globals.css', globalCss);
    
    // Create Home.module.css file
    const homeModuleCss = `.container {
  padding: 0 2rem;
}

.main {
  min-height: 100vh;
  padding: 4rem 0;
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.title {
  margin: 0;
  line-height: 1.15;
  font-size: 4rem;
  font-weight: 700;
}

.title a {
  color: #0070f3;
  text-decoration: none;
}

.title a:hover,
.title a:focus,
.title a:active {
  text-decoration: underline;
}

.description {
  margin: 4rem 0;
  line-height: 1.5;
  font-size: 1.5rem;
}

.code {
  background: #fafafa;
  border-radius: 5px;
  padding: 0.75rem;
  font-size: 1.1rem;
  font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
    Bitstream Vera Sans Mono, Courier New, monospace;
}

.grid {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  max-width: 800px;
}

.card {
  margin: 1rem;
  padding: 1.5rem;
  text-align: left;
  color: inherit;
  text-decoration: none;
  border: 1px solid #eaeaea;
  border-radius: 10px;
  transition: color 0.15s ease, border-color 0.15s ease;
  max-width: 300px;
}

.card:hover,
.card:focus,
.card:active {
  color: #0070f3;
  border-color: #0070f3;
}

.card h2 {
  margin: 0 0 1rem 0;
  font-size: 1.5rem;
}

.card p {
  margin: 0;
  font-size: 1.25rem;
  line-height: 1.5;
}`;
    
    await fileSystem.createFile('/nextjs-app/styles', 'Home.module.css', homeModuleCss);
    
    // Create .gitignore file
    const gitignore = `# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel`;
    
    await fileSystem.createFile('/nextjs-app', '.gitignore', gitignore);
    
    // Create README.md file
    const readme = `# Next.js Project

This is a [Next.js](https://nextjs.org/) project bootstrapped with a custom template.

## Getting Started

First, install the dependencies:

\`\`\`bash
npm install
# or
yarn install
\`\`\`

Then, run the development server:

\`\`\`bash
npm run dev
# or
yarn dev
\`\`\`

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying \`pages/index.js\`. The page auto-updates as you edit the file.`;
    
    await fileSystem.createFile('/nextjs-app', 'README.md', readme);
    
    console.log('[ProjectTemplates] Next.js project created successfully');
    return true;
    
  } catch (error) {
    console.error('[ProjectTemplates] Error creating Next.js project:', error);
    return false;
  }
};

// Create a utility file for handling file operations
export const createUtilityFile = async (fileSystem: any, utilityType: string): Promise<boolean> => {
  if (!fileSystem) {
    console.error('[ProjectTemplates] File system not available for creating utility');
    return false;
  }
  
  try {
    switch(utilityType) {
      case 'api-client':
        await ensureFolderExists(fileSystem, '/lib');
        
        const apiClient = `/**
 * API client utility for making HTTP requests
 */
const API_BASE_URL = process.env.REACT_APP_API_URL || '/api';

export const apiClient = {
  /**
   * Make a GET request
   * @param {string} endpoint - API endpoint to call
   * @param {Object} options - Additional fetch options
   * @returns {Promise<any>} - Parsed response data
   */
  async get(endpoint, options = {}) {
    return await request(endpoint, { method: 'GET', ...options });
  },
  
  /**
   * Make a POST request
   * @param {string} endpoint - API endpoint to call
   * @param {Object} data - Data to send in request body
   * @param {Object} options - Additional fetch options
   * @returns {Promise<any>} - Parsed response data
   */
  async post(endpoint, data, options = {}) {
    return await request(endpoint, { 
      method: 'POST',
      body: JSON.stringify(data),
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    });
  },
  
  /**
   * Make a PUT request
   * @param {string} endpoint - API endpoint to call
   * @param {Object} data - Data to send in request body
   * @param {Object} options - Additional fetch options
   * @returns {Promise<any>} - Parsed response data
   */
  async put(endpoint, data, options = {}) {
    return await request(endpoint, { 
      method: 'PUT',
      body: JSON.stringify(data),
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    });
  },
  
  /**
   * Make a DELETE request
   * @param {string} endpoint - API endpoint to call
   * @param {Object} options - Additional fetch options
   * @returns {Promise<any>} - Parsed response data
   */
  async delete(endpoint, options = {}) {
    return await request(endpoint, { method: 'DELETE', ...options });
  }
};

/**
 * Base request function
 * @param {string} endpoint - API endpoint to call
 * @param {Object} options - Fetch options
 * @returns {Promise<any>} - Parsed response data
 */
async function request(endpoint, options = {}) {
  const url = \`\${API_BASE_URL}\${endpoint}\`;
  
  try {
    const response = await fetch(url, {
      ...options,
      headers: {
        ...options.headers
      }
    });
    
    const data = await response.json();
    
    if (!response.ok) {
      throw new Error(data.message || 'API request failed');
    }
    
    return data;
  } catch (error) {
    console.error(\`API request error: \${url}\`, error);
    throw error;
  }
}

export default apiClient;`;
        
        await fileSystem.createFile('/lib', 'api-client.js', apiClient);
        return true;
        
      case 'auth-utils':
        await ensureFolderExists(fileSystem, '/lib');
        
        const authUtils = `/**
 * Authentication utility functions
 */
export const authUtils = {
  /**
   * Store auth token in localStorage
   * @param {string} token - Authentication token
   */
  setToken(token) {
    localStorage.setItem('auth_token', token);
  },
  
  /**
   * Retrieve auth token from localStorage
   * @returns {string|null} - Saved authentication token or null
   */
  getToken() {
    return localStorage.getItem('auth_token');
  },
  
  /**
   * Remove auth token from localStorage
   */
  removeToken() {
    localStorage.removeItem('auth_token');
  },
  
  /**
   * Check if user is authenticated
   * @returns {boolean} - True if authenticated
   */
  isAuthenticated() {
    return !!this.getToken();
  },
  
  /**
   * Parse JWT token payload
   * @param {string} token - JWT token
   * @returns {Object|null} - Parsed token payload
   */
  parseToken(token) {
    if (!token) return null;
    
    try {
      const base64Url = token.split('.')[1];
      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
      const payload = JSON.parse(window.atob(base64));
      return payload;
    } catch (error) {
      console.error('Error parsing token:', error);
      return null;
    }
  },
  
  /**
   * Get user info from token
   * @returns {Object|null} - User information
   */
  getUserInfo() {
    const token = this.getToken();
    if (!token) return null;
    
    return this.parseToken(token);
  }
};

export default authUtils;`;
        
        await fileSystem.createFile('/lib', 'auth-utils.js', authUtils);
        return true;
        
      default:
        console.error(`[ProjectTemplates] Unsupported utility type: ${utilityType}`);
        return false;
    }
  } catch (error) {
    console.error(`[ProjectTemplates] Error creating ${utilityType} utility:`, error);
    return false;
  }
};

// Add more project templates as needed
